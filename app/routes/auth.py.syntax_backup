"""
Complete Authentication Fix for AI Email Assistant
Addresses: State mismatch, client secret, and database issues
"""
import os
import uuid
import hashlib
from datetime import datetime, timedelta
from flask import Blueprint, request, redirect, url_for, session, jsonify, current_app, flash
from app.models import db
from app.models.user import User

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/microsoft')
def microsoft_login():
    """Microsoft OAuth login redirect (alias for /login)"""
    return redirect(url_for('auth.login'))

@auth_bp.route('/login')
def login():
    """Initiate OAuth login with Microsoft - FIXED VERSION"""
    try:
        # Clear any existing OAuth state to prevent conflicts
        session.pop('oauth_state', None)
        
        # Generate NEW state parameter for CSRF protection
        state = str(uuid.uuid4())
        session['oauth_state'] = state
        session.permanent = True  # Ensure session persists
        
        # Get Azure configuration
        client_id = current_app.config.get('AZURE_CLIENT_ID')
        tenant_id = current_app.config.get('AZURE_TENANT_ID')
        redirect_uri = current_app.config.get('AZURE_REDIRECT_URI')
        
        if not client_id or not tenant_id:
            current_app.logger.error("Missing Azure configuration")
            flash('Authentication not configured', 'error')
            return redirect(url_for('main.index'))
        
        # Define scopes (simplified for public client)
        scopes = 'openid profile email User.Read offline_access'
        
        # Use tenant-specific endpoint (FIXED)
        base_url = f"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/authorize"
        
        # Build OAuth URL
        oauth_url = (
            f"{base_url}?"
            f"client_id={client_id}&"
            f"response_type=code&"
            f"redirect_uri={redirect_uri}&"
            f"scope={scopes}&"
            f"state={state}&"
            f"response_mode=query&"
            f"prompt=select_account"
        )
        
        current_app.logger.info(f"Generated new OAuth state: {state}")
        current_app.logger.info(f"Redirecting to OAuth: {oauth_url[:100]}...")
        
        return redirect(oauth_url)
        
    except Exception as e:
        current_app.logger.error(f"Login error: {e}")
        flash('Login failed - please try again', 'error')
        return redirect(url_for('main.index'))

@auth_bp.route('/callback')
def callback():
    """Handle OAuth callback from Microsoft - FIXED VERSION"""
    try:
        # Get parameters from callback
        code = request.args.get('code')
        state = request.args.get('state')
        error = request.args.get('error')
        error_description = request.args.get('error_description')
        
        current_app.logger.info(f"Callback received - State: {state}, Code: {'Yes' if code else 'No'}")
        
        # Check for OAuth errors
        if error:
            current_app.logger.error(f"OAuth error: {error} - {error_description}")
            flash(f'Authentication failed: {error_description}', 'error')
            return redirect(url_for('main.index'))
        
        # Verify state parameter to prevent CSRF
        expected_state = session.get('oauth_state')
        current_app.logger.info(f"State verification - Expected: {expected_state}, Received: {state}")
        
        if not state or state != expected_state:
            current_app.logger.error(f"State mismatch: expected {expected_state}, got {state}")
            # Clear potentially corrupted session and try again
            session.clear()
            flash('Authentication session expired - please try again', 'warning')
            return redirect(url_for('auth.login'))
        
        if not code:
            current_app.logger.error("No authorization code received")
            flash('No authorization code received', 'error')
            return redirect(url_for('main.index'))
        
        # Try to exchange code for tokens (handle public client)
        user_info = None
        try:
            # PUBLIC CLIENT: Try without client secret first
            token_data = exchange_code_for_tokens_public(code)
            if token_data and 'access_token' in token_data:
                user_info = get_user_info_from_token(token_data)
                current_app.logger.info("Successfully authenticated with public client flow")
            else:
                current_app.logger.warning("Public client token exchange failed, trying confidential client")
                # CONFIDENTIAL CLIENT: Try with client secret
                token_data = exchange_code_for_tokens_confidential(code)
                if token_data and 'access_token' in token_data:
                    user_info = get_user_info_from_token(token_data)
                    current_app.logger.info("Successfully authenticated with confidential client flow")
        except Exception as token_error:
            current_app.logger.error(f"Token exchange error: {token_error}")
            token_data = None
        
        # Create or update user
        if user_info:
            try:
                user = create_or_update_user(user_info, token_data)
                current_app.logger.info(f"User authenticated: {user.email}")
            except Exception as user_error:
                current_app.logger.error(f"User creation failed: {user_error}")
                # Fallback to demo user
                user = create_demo_user_safe()
        else:
            current_app.logger.warning("Could not get user info, creating demo user")
            user = create_demo_user_safe()
        
        # Set session variables
        session['user_id'] = user.id
        session['user_email'] = user.email
        session['user_name'] = user.display_name
        session['authenticated'] = True
        session.permanent = True
        
        # Clear OAuth state
        session.pop('oauth_state', None)
        
        current_app.logger.info(f"Authentication successful: {user.email}")
        flash(f'Successfully signed in as {user.display_name}', 'success')
        
        return redirect(url_for('main.dashboard'))
        
    except Exception as e:
        current_app.logger.error(f"Callback error: {e}")
        import traceback
        traceback.print_exc()
        
        # Clear session and redirect to safe state
        session.clear()
        flash('Authentication failed - please try again', 'error')
        return redirect(url_for('main.index'))

def exchange_code_for_tokens_public(authorization_code):
    """Exchange authorization code for access token - PUBLIC CLIENT (no secret)"""
    try:
        import requests
        
        client_id = current_app.config.get('AZURE_CLIENT_ID')
        tenant_id = current_app.config.get('AZURE_TENANT_ID')
        redirect_uri = current_app.config.get('AZURE_REDIRECT_URI')
        
        token_endpoint = f"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token"
        
        # PUBLIC CLIENT: No client secret
        token_data = {
            'client_id': client_id,
            'code': authorization_code,
            'redirect_uri': redirect_uri,
            'grant_type': 'authorization_code',
            'scope': 'openid profile email User.Read'
        }
        
        response = requests.post(token_endpoint, data=token_data, timeout=30)
        
        if response.status_code == 200:
            token_result = response.json()
            current_app.logger.info("Successfully exchanged code for tokens (public client)")
            return token_result
        else:
            current_app.logger.warning(f"Public client token exchange failed: {response.status_code}")
            return None
            
    except Exception as e:
        current_app.logger.error(f"Public client token exchange error: {e}")
        return None

def exchange_code_for_tokens_confidential(authorization_code):
    """Exchange authorization code for access token - CONFIDENTIAL CLIENT (with secret)"""
    try:
        import requests
        
        client_id = current_app.config.get('AZURE_CLIENT_ID')
        client_secret = current_app.config.get('AZURE_CLIENT_SECRET')
        tenant_id = current_app.config.get('AZURE_TENANT_ID')
        redirect_uri = current_app.config.get('AZURE_REDIRECT_URI')
        
        if not client_secret:
            current_app.logger.info("No client secret configured - skipping confidential client flow")
            return None
        
        token_endpoint = f"https://login.microsoftonline.com/{tenant_id}/oauth2/v2.0/token"
        
        # CONFIDENTIAL CLIENT: With client secret
        token_data = {
            'client_id': client_id,
            'client_secret': client_secret,
            'code': authorization_code,
            'redirect_uri': redirect_uri,
            'grant_type': 'authorization_code',
            'scope': 'openid profile email User.Read'
        }
        
        response = requests.post(token_endpoint, data=token_data, timeout=30)
        
        if response.status_code == 200:
            token_result = response.json()
            current_app.logger.info("Successfully exchanged code for tokens (confidential client)")
            return token_result
        else:
            current_app.logger.error(f"Confidential client token exchange failed: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        current_app.logger.error(f"Confidential client token exchange error: {e}")
        return None

def get_user_info_from_token(token_data):
    """Get user information from Microsoft Graph using access token"""
    try:
        import requests
        
        access_token = token_data.get('access_token')
        if not access_token:
            return None
        
        headers = {
            'Authorization': f'Bearer {access_token}',
            'Content-Type': 'application/json'
        }
        
        response = requests.get('https://graph.microsoft.com/v1.0/me', headers=headers, timeout=30)
        
        if response.status_code == 200:
            user_data = response.json()
            current_app.logger.info(f"Retrieved user info: {user_data.get('mail', user_data.get('userPrincipalName'))}")
            return user_data
        else:
            current_app.logger.error(f"Failed to get user info: {response.status_code}")
            return None
            
    except Exception as e:
        current_app.logger.error(f"User info error: {e}")
        return None

def create_or_update_user(user_info, token_data):
    """Create or update user in database with proper error handling"""
    try:
        # Ensure database connection
        ensure_database_connection()
        
        # Extract user information
        email = user_info.get('mail') or user_info.get('userPrincipalName')
        azure_id = user_info.get('id')
        display_name = user_info.get('displayName', email)
        given_name = user_info.get('givenName', '')
        surname = user_info.get('surname', '')
        
        # Find existing user or create new one
        user = User.query.filter_by(email=email).first()
        
        if user:
            # Update existing user
            user.azure_id = azure_id
            user.display_name = display_name
            user.given_name = given_name
            user.surname = surname
            user.last_login = datetime.utcnow()
            current_app.logger.info(f"Updated existing user: {email}")
        else:
            # Create new user
            user = User(
                email=email,
                azure_id=azure_id,
                display_name=display_name,
                given_name=given_name,
                surname=surname,
                is_active=True,
                created_at=datetime.utcnow(),
                last_login=datetime.utcnow()
            )
            db.session.add(user)
            current_app.logger.info(f"Created new user: {email}")
        
        # Store token info (in production, encrypt these)
        if token_data and 'access_token' in token_data:
            user.access_token_hash = hash_token(token_data['access_token'])
            
        if token_data and 'expires_in' in token_data:
            expires_in = int(token_data['expires_in'])
            user.token_expires_at = datetime.utcnow() + timedelta(seconds=expires_in)
        
        db.session.commit()
        return user
        
    except Exception as e:
        current_app.logger.error(f"User creation/update error: {e}")
        db.session.rollback()
        raise

def create_demo_user_safe():
    """Create demo user with database error handling"""
    try:
        # Ensure database connection
        ensure_database_connection()
        
        demo_email = "demo@aiemailassistant.local"
        demo_name = "Demo User"
        
        user = User.query.filter_by(email=demo_email).first()
        if not user:
            user = User(
                email=demo_email,
                display_name=demo_name,
                azure_id=f"demo-{uuid.uuid4()}",
                is_active=True,
                created_at=datetime.utcnow(),
                last_login=datetime.utcnow()
            )
            db.session.add(user)
            db.session.commit()
            current_app.logger.info(f"Created demo user: {demo_email}")
        else:
            user.last_login = datetime.utcnow()
            db.session.commit()
        
        return user
        
    except Exception as e:
        current_app.logger.error(f"Demo user creation error: {e}")
        # Return a minimal user object for session
        class MinimalUser:
            def __init__(self):
                self.id = 1
                self.email = "demo@aiemailassistant.local"
                self.display_name = "Demo User"
        
        return MinimalUser()

def ensure_database_connection():
    """Ensure database directory exists and is writable"""
    try:
        # Check if using Docker config
        if current_app.config.get('USE_DOCKER_CONFIG'):
            current_app.logger.info("Using Docker database configuration")
            return
        
        # For SQLite, ensure directory exists
        db_url = current_app.config.get('SQLALCHEMY_DATABASE_URI', '')
        if 'sqlite' in db_url:
            # Create data directory if it doesn't exist
            os.makedirs('data', exist_ok=True)
            os.makedirs('instance', exist_ok=True)
            
            # Test write permissions
            test_file = 'data/test_write.tmp'
            try:
                with open(test_file, 'w') as f:
                    f.write('test')
                os.remove(test_file)
                current_app.logger.info("Database directory is writable")
            except Exception as write_error:
                current_app.logger.error(f"Database directory not writable: {write_error}")
                raise
        
        # Test database connection
        with current_app.app_context():
            # Test database connection (SQLAlchemy 2.0 compatible)
        try:
            with db.engine.connect() as conn:
                conn.execute(db.text('SELECT 1'))
        except Exception:
            # Fallback for older SQLAlchemy versions
            db.engine.execute(db.text('SELECT 1'))
            
    except Exception as e:
        current_app.logger.error(f"Database connection error: {e}")
        raise

@auth_bp.route('/logout', methods=['POST', 'GET'])
def logout():
    """Log out current user"""
    try:
        user_email = session.get('user_email', 'Unknown')
        
        # Clear session
        session.clear()
        
        current_app.logger.info(f"User logged out: {user_email}")
        
        if request.method == 'POST':
            return jsonify({'success': True, 'message': 'Logged out successfully'})
        else:
            flash('Successfully logged out', 'info')
            return redirect(url_for('main.index'))
            
    except Exception as e:
        current_app.logger.error(f"Logout error: {e}")
        if request.method == 'POST':
            return jsonify({'success': False, 'error': str(e)}), 500
        else:
            flash('Logout completed', 'info')
            return redirect(url_for('main.index'))

@auth_bp.route('/status')
def status():
    """Get authentication status"""
    try:
        user_id = session.get('user_id')
        if user_id:
            # Try to get user from database
            try:
                user = User.query.get(user_id)
                if user and user.is_active:
                    return jsonify({
                        'authenticated': True,
                        'user': {
                            'id': user.id,
                            'email': user.email,
                            'display_name': user.display_name,
                            'last_login': user.last_login.isoformat() if user.last_login else None,
                        }
                    })
            except Exception as db_error:
                current_app.logger.warning(f"Database error in status check: {db_error}")
                # If database is unavailable, check session only
                if session.get('authenticated'):
                    return jsonify({
                        'authenticated': True,
                        'user': {
                            'id': user_id,
                            'email': session.get('user_email'),
                            'display_name': session.get('user_name'),
                        }
                    })
        
        return jsonify({'authenticated': False})
        
    except Exception as e:
        current_app.logger.error(f"Status check error: {e}")
        return jsonify({'authenticated': False, 'error': str(e)})

@auth_bp.route('/demo-login', methods=['POST'])
def demo_login():
    """Demo login for testing purposes"""
    try:
        user = create_demo_user_safe()
        
        # Store user session
        session['user_id'] = user.id
        session['user_email'] = user.email
        session['user_name'] = user.display_name
        session['authenticated'] = True
        session.permanent = True
        
        current_app.logger.info(f"Demo login successful: {user.email}")
        
        return jsonify({
            'success': True,
            'message': 'Demo login successful',
            'user': {
                'id': user.id,
                'email': user.email,
                'display_name': user.display_name
            }
        })
        
    except Exception as e:
        current_app.logger.error(f"Demo login error: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500

# Utility functions
def hash_token(token):
    """Hash a token for secure storage"""
    if not token:
        return None
    return hashlib.sha256(token.encode('utf-8')).hexdigest()